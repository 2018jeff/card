(function() {
  var $, Card;

  $ = jQuery;

  $.card = {};

  $.card.fn = {};

  $.fn.card = function(opts) {
    return $.card.fn.construct.apply(this, opts);
  };

  Card = (function() {
    var validToggler;

    Card.defaults = {
      selectors: {
        card: '.card',
        numberInput: 'input[name="number"]',
        expiryInput: 'input[name="expiry"]',
        cvcInput: 'input[name="cvc"]',
        numberDisplay: '.card .number',
        expiryDisplay: '.card .expiry',
        cvcDisplay: '.card .cvc'
      }
    };

    function Card(opts) {
      var _this = this;
      this.options = $.extend({}, opts, Card.defaults);
      $.each(this.options.selectors, function(name, selector) {
        return _this["$" + name] = _this.options[name] || $(selector);
      });
      this.attachFormatters();
      this.attachHandlers();
    }

    Card.prototype.attachFormatters = function() {
      this.$numberInput.payment('formatCardNumber');
      this.$expiryInput.payment('formatCardExpiry');
      return this.$cvcInput.payment('formatCardCVC');
    };

    Card.prototype.attachHandlers = function() {
      this.$numberInput.bindVal(this.$numberDisplay, validToggler('validateCardNumber'), {
        fill: false
      }).on('payment.cardType', this.handle('setCardType'));
      this.$expiryInput.bindVal(this.$expiryDisplay, [
        function(val) {
          return val.replace(/(\s+)/g, '');
        }, validToggler('validateCardExpiry')
      ]).on('keydown', this.handle('captureTab'));
      this.$cvcInput.bindVal(this.$cvcDisplay, validToggler('validateCardCVC'));
      return this.$cvcInput.on('focus', this.handle('flipCard')).on('blur', this.handle('flipCard'));
    };

    Card.prototype.handle = function(fn) {
      var _this = this;
      return function(e) {
        var $el, args;
        $el = $(e.currentTarget);
        args = Array.prototype.slice.call(arguments);
        args.unshift($el);
        return _this.handlers[fn].apply(_this, args);
      };
    };

    Card.prototype.handlers = {
      setCardType: function($el, e, cardType) {
        var allTypes, card;
        if (!this.$card.hasClass(cardType)) {
          allTypes = (function() {
            var _i, _len, _ref, _results;
            _ref = $.payment.cards;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              card = _ref[_i];
              _results.push(card.type);
            }
            return _results;
          })();
          this.$card.removeClass('unknown');
          this.$card.removeClass(allTypes.join(' '));
          this.$card.addClass(cardType);
          return this.$card.toggleClass('identified', cardType !== 'unknown');
        }
      },
      flipCard: function($el, e) {
        return this.$card.toggleClass('flipped');
      },
      captureTab: function($el, e) {
        var keyCode, val;
        keyCode = e.keyCode || e.which;
        if (keyCode !== 9 || e.shiftKey) {
          return;
        }
        val = $el.payment('cardExpiryVal');
        if (!$.payment.validateCardExpiry(val.month, val.year)) {
          return e.preventDefault();
        }
      },
      checkAmex: function(val, $el) {
        if ($el.hasClass('amex')) {
          return val = "   " + val;
        }
      }
    };

    $.fn.bindVal = function(out, filters, opts) {
      var $el, i, o, outDefaults;
      opts = opts || {
        fill: true
      };
      if (filters) {
        if (!(filters instanceof Array)) {
          filters = [filters];
        }
      } else {
        filters = [];
      }
      $el = $(this);
      outDefaults = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = out.length; _i < _len; i = ++_i) {
          o = out[i];
          _results.push(out.eq(i).text());
        }
        return _results;
      })();
      $el.on('focus', function() {
        return out.addClass('focused');
      });
      $el.on('blur', function() {
        return out.removeClass('focused');
      });
      $el.on('keyup', function(e) {
        var filter, outVal, val, _i, _j, _len, _len1, _results;
        val = $el.val();
        for (_i = 0, _len = filters.length; _i < _len; _i++) {
          filter = filters[_i];
          val = filter(val, $el, out);
        }
        _results = [];
        for (i = _j = 0, _len1 = out.length; _j < _len1; i = ++_j) {
          o = out[i];
          if (opts.fill) {
            outVal = val + outDefaults[i].substring(val.length);
          } else {
            outVal = val || outDefaults[i];
          }
          _results.push(out.eq(i).text(outVal));
        }
        return _results;
      });
      return $el;
    };

    validToggler = function(validatorName) {
      return function(val, $in, $out) {
        $out.toggleClass('valid', $.payment[validatorName](val));
        return val;
      };
    };

    return Card;

  })();

  $.card.fn.construct = function(opts) {
    return new Card(opts);
  };

  $('form').card({});

}).call(this);
