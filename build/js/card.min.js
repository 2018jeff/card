(function() {
  var $,
    __slice = [].slice;

  $ = jQuery;

  $.card = {};

  $.card.fn = {};

  $.fn.card = function(opts) {
    return $.card.fn.construct.apply(this, opts);
  };

  (function($, window) {
    var Card;
    Card = (function() {
      var validToggler;

      Card.prototype.template = "<div class=\"card-container\">\n    <div class=\"card\">\n        <div class=\"front\">\n                <div class=\"logo visa\">visa</div>\n                <div class=\"logo mastercard\">MasterCard</div>\n                <div class=\"logo amex\"></div>\n                <div class=\"logo discover\">discover</div>\n            <div class=\"lower\">\n                <div class=\"shiny\"></div>\n                <div class=\"cvc display\">••••</div>\n                <div class=\"number display\">•••• •••• •••• ••••</div>\n                <div class=\"name display\">Jesse Pollak</div>\n                <div class=\"expiry display\">••/••</div>\n            </div>\n        </div>\n        <div class=\"back\">\n            <div class=\"bar\"></div>\n            <div class=\"cvc display\">•••</div>\n            <div class=\"shiny\"></div>\n        </div>\n    </div>\n</div>";

      Card.prototype.defaults = {
        formatting: true,
        formSelectors: {
          numberInput: 'input[name="number"]',
          expiryInput: 'input[name="expiry"]',
          cvcInput: 'input[name="cvc"]'
        },
        cardSelectors: {
          cardContainer: '.card-container',
          card: '.card',
          numberDisplay: '.number',
          expiryDisplay: '.expiry',
          cvcDisplay: '.cvc'
        }
      };

      function Card(el, opts) {
        this.options = $.extend({}, opts, this.defaults);
        this.$el = $(el).is('form') ? $(el) : $(el).find('form');
        if (!this.options.container) {
          console.log("Please provide a container");
          return;
        }
        this.$container = $(this.options.container);
        this.render();
        this.attachHandlers();
      }

      Card.prototype.render = function() {
        var baseWidth,
          _this = this;
        this.$container.append(this.template);
        $.each(this.options.cardSelectors, function(name, selector) {
          return _this["$" + name] = _this.$container.find(selector);
        });
        $.each(this.options.formSelectors, function(name, selector) {
          return _this["$" + name] = _this.options[name] || $(selector);
        });
        if (this.options.formatting) {
          this.$numberInput.payment('formatCardNumber');
          this.$expiryInput.payment('formatCardExpiry');
          this.$cvcInput.payment('formatCardCVC');
        }
        if (this.options.width) {
          baseWidth = parseInt(this.$cardContainer.css('width'));
          return this.$cardContainer.css("transform", "scale(" + (this.options.width / baseWidth) + ")");
        }
      };

      Card.prototype.attachHandlers = function() {
        this.$numberInput.bindVal(this.$numberDisplay, validToggler('validateCardNumber'), {
          fill: false
        }).on('payment.cardType', this.handle('setCardType'));
        this.$expiryInput.bindVal(this.$expiryDisplay, [
          function(val) {
            return val.replace(/(\s+)/g, '');
          }, validToggler('validateCardExpiry')
        ]).on('keydown', this.handle('captureTab'));
        this.$cvcInput.bindVal(this.$cvcDisplay, validToggler('validateCardCVC'));
        return this.$cvcInput.on('focus', this.handle('flipCard')).on('blur', this.handle('flipCard'));
      };

      Card.prototype.handle = function(fn) {
        var _this = this;
        return function(e) {
          var $el, args;
          $el = $(e.currentTarget);
          args = Array.prototype.slice.call(arguments);
          args.unshift($el);
          return _this.handlers[fn].apply(_this, args);
        };
      };

      Card.prototype.handlers = {
        setCardType: function($el, e, cardType) {
          var allTypes, card;
          if (!this.$card.hasClass(cardType)) {
            allTypes = (function() {
              var _i, _len, _ref, _results;
              _ref = $.payment.cards;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                card = _ref[_i];
                _results.push(card.type);
              }
              return _results;
            })();
            this.$card.removeClass('unknown');
            this.$card.removeClass(allTypes.join(' '));
            this.$card.addClass(cardType);
            return this.$card.toggleClass('identified', cardType !== 'unknown');
          }
        },
        flipCard: function($el, e) {
          return this.$card.toggleClass('flipped');
        },
        captureTab: function($el, e) {
          var keyCode, val;
          keyCode = e.keyCode || e.which;
          if (keyCode !== 9 || e.shiftKey) {
            return;
          }
          val = $el.payment('cardExpiryVal');
          if (!(val.month || val.year)) {
            return;
          }
          if (!$.payment.validateCardExpiry(val.month, val.year)) {
            return e.preventDefault();
          }
        }
      };

      $.fn.bindVal = function(out, filters, opts) {
        var $el, i, o, outDefaults;
        opts = opts || {
          fill: true
        };
        if (filters) {
          if (!(filters instanceof Array)) {
            filters = [filters];
          }
        } else {
          filters = [];
        }
        $el = $(this);
        outDefaults = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = out.length; _i < _len; i = ++_i) {
            o = out[i];
            _results.push(out.eq(i).text());
          }
          return _results;
        })();
        $el.on('focus', function() {
          return out.addClass('focused');
        });
        $el.on('blur', function() {
          return out.removeClass('focused');
        });
        $el.on('keyup', function(e) {
          var filter, outVal, val, _i, _j, _len, _len1, _results;
          val = $el.val();
          for (_i = 0, _len = filters.length; _i < _len; _i++) {
            filter = filters[_i];
            val = filter(val, $el, out);
          }
          _results = [];
          for (i = _j = 0, _len1 = out.length; _j < _len1; i = ++_j) {
            o = out[i];
            if (opts.fill) {
              outVal = val + outDefaults[i].substring(val.length);
            } else {
              outVal = val || outDefaults[i];
            }
            _results.push(out.eq(i).text(outVal));
          }
          return _results;
        });
        return $el;
      };

      validToggler = function(validatorName) {
        return function(val, $in, $out) {
          $out.toggleClass('valid', $.payment[validatorName](val));
          return val;
        };
      };

      return Card;

    })();
    return $.fn.extend({
      card: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('card');
          if (!data) {
            $this.data('card', (data = new Card(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);
